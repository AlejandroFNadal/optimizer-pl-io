{"version":3,"sources":["logo.svg","components/Configuration.js","components/Processing.js","components/Presentation.js","components/Inicio.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Configuration","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","variables","xi","descripcion","coeficiente","restricciones","method","objective","handlerMethod","bind","assertThisInitialized","handlerObjective","handlerInputRes","handlerInputVar","handleNewsRes","handleNewsVar","event","_event$target","target","value","name","setState","_event$target2","filter","element","length","push","ri","x1","x2","eq","derecha","splice","_this2","variablesToDesc","map","variable","index","react_default","a","createElement","InputGroup","key","Prepend","Text","id","FormControl","placeholder","aria-label","aria-describedby","onChange","restriccionesToDesc","restriccion","Fragment","Jumbotron","Container","Row","Card","className","ToggleButtonGroup","type","ToggleButton","Col","md","span","offset","Button","onClick","nextStep","React","Component","Processing","params","Alert","variant","Presentation","Inicio","fluid","xs","src","logo","alt","height","ProgressBar","animated","striped","now","react_step_wizard_min_default","lg","components_Configuration","components_Processing","components_Presentation","App","components_Inicio","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.25e18eb0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport {Alert, ToggleButtonGroup, ToggleButton, Button, Jumbotron, Container, Row, Col, Card, InputGroup, FormControl} from 'react-bootstrap';\r\n\r\n\r\n\r\nclass Configuration extends React.Component{\r\n    constructor (props){\r\n        super(props);\r\n        this.state={\r\n            variables:[{xi:1, descripcion:'',coeficiente:0},{xi:2,descripcion:'',coeficiente:0}],\r\n            restricciones:[],\r\n            method:\"graph\",\r\n            objective:\"max\"\r\n        };\r\n        this.handlerMethod=this.handlerMethod.bind(this);\r\n        this.handlerObjective=this.handlerObjective.bind(this);\r\n        this.handlerInputRes=this.handlerInputRes.bind(this);\r\n        this.handlerInputVar=this.handlerInputVar.bind(this);\r\n        this.handleNewsRes();\r\n        this.handleNewsVar(this.state.method);\r\n\r\n    }\r\n\r\n    handlerInputVar (event) {\r\n        let {value, name} = event.target;\r\n        let {variables} = this.state;\r\n        variables[name].descripcion = value;\r\n        this.setState({variables});\r\n        this.handleNewsVar(this.state.method)\r\n    }\r\n\r\n    handlerInputRes (event) {\r\n        let {value, name} = event.target;\r\n        let {restricciones} = this.state;\r\n        restricciones[name].descripcion = value;\r\n        this.setState({restricciones});\r\n        this.handleNewsRes()\r\n    }\r\n\r\n    handleNewsRes () {\r\n        let {restricciones} = this.state;\r\n        let counterWitheRes = restricciones.filter( element => element.descripcion.length === 0).length;\r\n        if (counterWitheRes === 0 ) {  \r\n            restricciones.push({ri:restricciones.length+1,descripcion:'',x1:0,x2:0,eq:'>',derecha:0})\r\n            this.setState({restricciones})\r\n        }\r\n    }\r\n    handleNewsVar (method) { \r\n        if (method === 'simplex') {\r\n            let {variables} = this.state;\r\n            let counterWitheVar = variables.filter( element => element.descripcion.length === 0).length;\r\n            if (counterWitheVar === 0 ) {  \r\n                variables.push({xi:variables.length+1,descripcion:'',coeficiente:0})\r\n                this.setState({variables})\r\n            }\r\n        }else{\r\n            let {variables} = this.state;\r\n            if(variables.length > 2) {     \r\n                variables.splice(2)\r\n                this.setState({variables})      \r\n            }\r\n        }\r\n        \r\n\r\n    }\r\n    handlerMethod (method) {\r\n        this.setState({method});\r\n        this.handleNewsVar(method);\r\n    }\r\n\r\n    handlerObjective (objective) {\r\n        this.setState({objective})\r\n    }\r\n\r\n\r\n    \r\n    render () {\r\n        let {variables} = this.state;\r\n        let {restricciones} = this.state;\r\n        let variablesToDesc = variables.map( (variable,index) => {       \r\n            return(<InputGroup key={index}>\r\n                <InputGroup.Prepend>\r\n                    <InputGroup.Text name=\"xi\" id=\"variable\">{\"X\"+variable.xi}</InputGroup.Text>\r\n                </InputGroup.Prepend>\r\n                <FormControl\r\n                    name={index}\r\n                    placeholder=\"Descripcion de la Variable\"\r\n                    aria-label=\"Descripcion\"\r\n                    aria-describedby=\"variable\"\r\n                    onChange={this.handlerInputVar}\r\n                    value={variable.descripcion}\r\n                    />\r\n            </InputGroup>)\r\n        });\r\n        let restriccionesToDesc = restricciones.map( (restriccion,index) => {\r\n            return(<InputGroup key={index}>\r\n                <InputGroup.Prepend>\r\n                    <InputGroup.Text name=\"ri\" id=\"restriccion\">{\"R\"+restriccion.ri}</InputGroup.Text>\r\n                </InputGroup.Prepend>\r\n                <FormControl\r\n                    name={index}\r\n                    placeholder=\"Descripcion de la Restriccion\"\r\n                    aria-label=\"Descripcion\"\r\n                    aria-describedby=\"restriccion\"\r\n                    onChange={this.handlerInputRes}\r\n                    value={restriccion.descripcion}\r\n                    />\r\n            </InputGroup>)\r\n        });\r\n        \r\n        return(\r\n            <>\r\n            <h3>Comenzamos Configurando nuestro Modelo:</h3>\r\n            <Jumbotron>\r\n                <Container>\r\n                    <Row>\r\n                        <Card className=\"mx-auto\">\r\n                            <p>Metodo a Utilizar:</p>\r\n                            <ToggleButtonGroup type=\"radio\" onChange={this.handlerMethod} value={this.state.method} name=\"method\">\r\n                                <ToggleButton value=\"graph\">\r\n                                    GRAFICO\r\n                                </ToggleButton>\r\n                                <ToggleButton value=\"simplex\">\r\n                                    SIMPLEX\r\n                                </ToggleButton>\r\n                            </ToggleButtonGroup>\r\n                        </Card>\r\n                        <Card className=\"mx-auto\">\r\n                            <p>Tipo de Optimizacion:</p>\r\n                            <ToggleButtonGroup type=\"radio\" onChange={this.handlerObjective} value={this.state.objective} name=\"objective\" >\r\n                                <ToggleButton value=\"max\">\r\n                                    Maximizacion\r\n                                </ToggleButton>\r\n                                <ToggleButton value=\"min\">\r\n                                    Minimizacion\r\n                                </ToggleButton>\r\n                            </ToggleButtonGroup>\r\n                        </Card>\r\n                    </Row>\r\n                    <Row>\r\n                        <Card className=\"w-100 mt-3\">       \r\n                            <h5>Variables:</h5>\r\n                            {variablesToDesc}\r\n                        </Card>\r\n                    </Row>\r\n                    <Row>\r\n                        <Card className=\"w-100 mt-3\">\r\n                            <h5>Restricciones:</h5>\r\n                            {restriccionesToDesc}\r\n                        </Card>\r\n                    </Row>\r\n                    <Row className=\"mt-3\">\r\n                        <Col md={{ span: 6, offset: 6 }}>\r\n                            <Button onClick={this.props.nextStep}>Continuar</Button>\r\n                        </Col> \r\n                    </Row>\r\n                </Container>\r\n                \r\n            </Jumbotron>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Configuration;","import React from 'react';\r\nimport {Alert} from 'react-bootstrap';\r\n\r\nclass Processing extends React.Component{\r\n    constructor (props){\r\n        super(props)\r\n        this.state={\r\n            params:\"\"\r\n        }\r\n\r\n    }\r\n    render () {\r\n        return(\r\n            <Alert variant=\"success\">HELLO PROCESOS</Alert>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default Processing;","import React from 'react';\r\nimport {Alert} from 'react-bootstrap';\r\n\r\nclass Presentation extends React.Component{\r\n    constructor (props){\r\n        super(props)\r\n        this.state={\r\n            params:\"\"\r\n        }\r\n\r\n    }\r\n    render () {\r\n        return(\r\n            <Alert variant=\"warning\">HELLO PRESENETATIOANON</Alert>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default Presentation;","import React from 'react';\r\nimport { Container,Col,Row,ProgressBar } from \"react-bootstrap\";\r\nimport  Configuration  from \"./Configuration\";\r\nimport  Processing  from \"./Processing\";\r\nimport  Presentation  from \"./Presentation\";\r\nimport logo from '../logo.svg';\r\nimport StepWizard from 'react-step-wizard';\r\n\r\n\r\nclass Inicio extends React.Component{\r\n    constructor (props){\r\n        super(props)\r\n        this.state={\r\n            params:\"\"\r\n        }\r\n    }\r\n  \r\n    render () {\r\n\r\n        return(\r\n            \r\n            <Container fluid className=\"App\">\r\n                <Row className=\"\">\r\n                    <Col xs={12} md={6}  className=\"mx-auto\">\r\n                        <img src={logo} className=\"App-logo\" alt=\"logo\" height=\"200\" />\r\n                        <ProgressBar animated striped variant=\"primary\" now={33} />\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <StepWizard lg={12} md={6}  className=\"mt-4 mx-auto\">\r\n                        <Configuration></Configuration>\r\n                        <Processing></Processing>\r\n                        <Presentation></Presentation>\r\n                    </StepWizard>\r\n                </Row>\r\n            </Container>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default Inicio;","import React from 'react';\nimport  Inicio  from \"./components/Inicio\";\nimport './App.css';\n\nfunction App() {\n  return (\n    <Inicio></Inicio>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}