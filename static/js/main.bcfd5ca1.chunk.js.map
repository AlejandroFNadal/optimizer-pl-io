{"version":3,"sources":["logo.svg","components/Configuration.js","components/Processing.js","components/Presentation.js","components/Inicio.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Configuration","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","params","react_default","a","createElement","Fragment","Jumbotron","Container","Row","Card","className","ButtonGroup","toggle","ToggleButton","active","type","name","value","defaultChecked","InputGroup","Prepend","Text","id","FormControl","placeholder","aria-label","aria-describedby","Col","md","span","offset","Button","onClick","nextStep","React","Component","Processing","Alert","variant","Presentation","Inicio","fluid","xs","src","logo","alt","height","ProgressBar","animated","striped","now","react_step_wizard_min_default","lg","components_Configuration","components_Processing","components_Presentation","App","components_Inicio","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bcfd5ca1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport {Alert, ButtonGroup, ToggleButton, Button, Jumbotron, Container, Row, Col, Card, InputGroup, FormControl} from 'react-bootstrap';\r\n\r\nclass Configuration extends React.Component{\r\n    constructor (props){\r\n        super(props)\r\n        this.state={\r\n            params:\"\"\r\n        }\r\n\r\n    }\r\n    render () {\r\n        \r\n        return(\r\n            <>\r\n            <h3>Comenzamos Configurando nuestro Modelo:</h3>\r\n            <Jumbotron>\r\n                <Container>\r\n                    <Row>\r\n                        <Card className=\"mx-auto\">\r\n                            <p>Metodo a Utilizar:</p>\r\n                            <ButtonGroup toggle >\r\n                                <ToggleButton active type=\"radio\" name=\"method\" value=\"graph\">\r\n                                    GRAFICO\r\n                                </ToggleButton>\r\n                                <ToggleButton type=\"radio\" name=\"mehtod\" value=\"simplex\">\r\n                                    SIMPLEX\r\n                                </ToggleButton>\r\n                            </ButtonGroup>\r\n                        </Card>\r\n                        <Card className=\"mx-auto\">\r\n                            <p>Tipo de Optimizacion:</p>\r\n                            <ButtonGroup toggle >\r\n                                <ToggleButton type=\"radio\" name=\"optim\" defaultChecked value=\"max\">\r\n                                    Maximizacion\r\n                                </ToggleButton>\r\n                                <ToggleButton type=\"radio\" name=\"optim\" value=\"min\">\r\n                                    Minimizacion\r\n                                </ToggleButton>\r\n                            </ButtonGroup>\r\n                        </Card>\r\n                    </Row>\r\n                    <Row>\r\n                        <Card className=\"w-100 mt-3\">       \r\n                            <h5>Variables:</h5>\r\n                            <InputGroup>\r\n                                <InputGroup.Prepend>\r\n                                    <InputGroup.Text id=\"variable\">{'X1'}</InputGroup.Text>\r\n                                </InputGroup.Prepend>\r\n                                <FormControl\r\n                                    placeholder=\"Descripcion de la Variable\"\r\n                                    aria-label=\"Desc\"\r\n                                    aria-describedby=\"variable\"\r\n                                    />\r\n                            </InputGroup>\r\n                        </Card>\r\n                    </Row>\r\n                    <Row>\r\n                        <Card className=\"w-100 mt-3\">\r\n                            <h5>Restricciones:</h5>\r\n                            <InputGroup>\r\n                                <InputGroup.Prepend>\r\n                                    <InputGroup.Text id=\"restriccion\">{'R1'}</InputGroup.Text>\r\n                                </InputGroup.Prepend>\r\n                                <FormControl\r\n                                    placeholder=\"Descripcion de la Restriccion\"\r\n                                    aria-label=\"Desc\"\r\n                                    aria-describedby=\"restriccion\"\r\n                                    />\r\n                            </InputGroup>\r\n                        </Card>\r\n                    </Row>\r\n                    <Row className=\"mt-3\">\r\n                        <Col md={{ span: 6, offset: 6 }}>\r\n                            <Button onClick={this.props.nextStep}>Continuar</Button>\r\n                        </Col> \r\n                    </Row>\r\n                </Container>\r\n                \r\n            </Jumbotron>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Configuration;","import React from 'react';\r\nimport {Alert} from 'react-bootstrap';\r\n\r\nclass Processing extends React.Component{\r\n    constructor (props){\r\n        super(props)\r\n        this.state={\r\n            params:\"\"\r\n        }\r\n\r\n    }\r\n    render () {\r\n        return(\r\n            <Alert variant=\"success\">HELLO PROCESOS</Alert>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default Processing;","import React from 'react';\r\nimport {Alert} from 'react-bootstrap';\r\n\r\nclass Presentation extends React.Component{\r\n    constructor (props){\r\n        super(props)\r\n        this.state={\r\n            params:\"\"\r\n        }\r\n\r\n    }\r\n    render () {\r\n        return(\r\n            <Alert variant=\"warning\">HELLO PRESENETATIOANON</Alert>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default Presentation;","import React from 'react';\r\nimport { Container,Col,Row,ProgressBar } from \"react-bootstrap\";\r\nimport  Configuration  from \"./Configuration\";\r\nimport  Processing  from \"./Processing\";\r\nimport  Presentation  from \"./Presentation\";\r\nimport logo from '../logo.svg';\r\nimport StepWizard from 'react-step-wizard';\r\n\r\n\r\nclass Inicio extends React.Component{\r\n    constructor (props){\r\n        super(props)\r\n        this.state={\r\n            params:\"\"\r\n        }\r\n    }\r\n  \r\n    render () {\r\n\r\n        return(\r\n            \r\n            <Container fluid className=\"App\">\r\n                <Row className=\"\">\r\n                    <Col xs={12} md={6}  className=\"mx-auto\">\r\n                        <img src={logo} className=\"App-logo\" alt=\"logo\" height=\"200\" />\r\n                        <ProgressBar animated striped variant=\"primary\" now={33} />\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <StepWizard lg={12} md={6}  className=\"mt-4 mx-auto\">\r\n                        <Configuration></Configuration>\r\n                        <Processing></Processing>\r\n                        <Presentation></Presentation>\r\n                    </StepWizard>\r\n                </Row>\r\n            </Container>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default Inicio;","import React from 'react';\nimport  Inicio  from \"./components/Inicio\";\nimport './App.css';\n\nfunction App() {\n  return (\n    <Inicio></Inicio>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}