{"version":3,"sources":["components/Configuration.js","components/elements/Restriccion.js","components/elements/FuncionObj.js","components/elements/ReferencesList.js","components/Processing.js","components/elements/SimplexPresentation.js","components/elements/GraphicPresentation.js","components/Presentation.js","components/LinealProg.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["Configuration","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handlerInputVar","event","_event$target","target","value","name","variables","status","xi","descripcion","splice","handleVariables","handleNewsVar","method","handlerInputRes","_event$target2","restricciones","ri","handleRestricciones","handleNewsRes","filter","element","length","push","coeficientes","eq","derecha","coeficiente","state","faltaDescrip","prevProps","_this$props$status","variablesDescriptionsMin","va","restriccionesDescriptionsMin","re","lastStep","setState","_this2","variablesARenderizar","map","variable","index","react_default","a","createElement","InputGroup","className","id","key","InputGroupAddon","addonType","InputGroupText","Input","placeholder","aria-label","aria-describedby","onChange","UncontrolledPopover","flip","trigger","placement","PopoverBody","restriccionesARenderizar","restriccion","buttonsMethods","ButtonGroup","Button","outline","onClick","handleMethod","active","color","buttonsOptType","handleObjective","objective","Fragment","Container","Row","Col","Card","CardHeader","CardBody","integer","toggleInteger","loadExampleModel","PopoverHeader","CardTitle","Alert","React","Component","Restriccion","cantVariables","diferencia","thisEq","botoneraMaxMin","e","handleCoefRes","disabled","inputsRestriccions","indx","type","UncontrolledTooltip","FuncionObj","variablesToFunction","vari","handleCoefVar","toUpperCase","ReferencesList","listDescriptionsVarItems","array","item","ListGroupItem","Badge","listDescriptionsResItems","references","size","Collapse","isOpen","ListGroup","Processing","parseInt","console","log","faltaCoe","every","varsOperativas","restriccionesInput","elements_Restriccion","elements_ReferencesList","elements_FuncionObj","SimplexPresentation","tablaDeRecursosFoot","cantUsoVar","variableId","tableBody","restri","Table","responsive","mapperAnalisisTable","result","tableResult","resultSetArray","entries","solutionSet","matrix","_tableau","indexByCol","varIndexByCol","variablesList","variablesPerIndex","variablesRealesList","el","isSlack","slacksEnCero","keys","includes","evaluation","forEach","_ref","_ref2","slicedToArray","slice","col","indCol","Math","abs","cardsVariablesRender","CardText","CardFooter","details","_this$props","elementosTabAnalisis","resultAnalisisCard","resultDetalleCard","randomColor","require","GraphicPresentation","getLinesAndExpressions","expresiones","lines","x","Expression","multiply","y","expressRestri","add","restriEquation","Equation","tipo","yEqu","solveFor","xEqu","getColorList","title","getOptimPoint","solSet","Number","P","getPoints","points","exp","expResultX","expResultY","pointInAxY","verifyPointInRestrictions","pointInAxX","exp1","exp2","point","getTableResult","verifyPointInPoints","verify","calIzq","round","_forgetValue","_rememberValue","mapperLinesSeries","referencias","data","es","optimMark","graph","elem","_this$getLinesAndExpr","_this$props2","_this$getLinesAndExpr2","_this$state","onMouseLeave","pointer","width","height","onValueMouseOver","onValueMouseOut","opacity","orientation","items","convertAppToModelForSolverPrimal","datosApp","model","optimize","opType","constraints","ints","newVari","res","min","max","Presentation","calculateResults","solver","Solve","printResults","feasible","elements_SimplexPresentation","elements_GraphicPresentation","LinealProg","handleResult","step","barProg","finishButtonClick","steps","stepName","component","stepProps","fluid","xs","md","src","logo","alt","Progress","animated","dist_default","progressbar","headerTextCenter","validate","previousButtonText","nextButtonText","finishButtonText","LinealProgramacion","components_LinealProg","NoLinealProgramacion","Jumbotron","react_router_dom","to","Index","tag","href","App","basename","process","react_router","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.8725d8e9.chunk.js","sourcesContent":["import React from 'react';\r\nimport {ButtonGroup, Button, Container, Row,Col, Card,CardBody,CardHeader,CardTitle} from 'reactstrap';\r\nimport {Alert,InputGroup,InputGroupAddon,InputGroupText,Input,UncontrolledPopover,PopoverBody,PopoverHeader} from 'reactstrap';\r\n\r\n\r\n\r\nclass Configuration extends React.Component{\r\n    constructor (props){\r\n        super(props);\r\n        this.state={faltaDescrip:''};\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.handleNewsRes()\r\n    }\r\n    \r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps!==this.props) {\r\n            this.handleNewsRes()\r\n            this.handleNewsVar(this.props.status.method)\r\n        }\r\n    }\r\n    //Funcion que permite validar si se ingresaron todos los cambios correspondientes en la etapa\r\n    isValidated(){\r\n        let {variables,restricciones} = this.props.status;\r\n        let variablesDescriptionsMin = variables.filter( va => va.descripcion !== '');\r\n        let restriccionesDescriptionsMin = restricciones.filter(re => re.descripcion !=='')\r\n        if (variablesDescriptionsMin.length > 1 &  restriccionesDescriptionsMin.length > 0 ) { \r\n            this.props.lastStep(1)\r\n            this.setState({faltaDescrip:''});\r\n            return true\r\n        }else {\r\n\r\n            if (variablesDescriptionsMin < 2 ){\r\n                this.setState({faltaDescrip:'Se necesita como minimo dos Variables.'});\r\n                \r\n            }else{\r\n                this.setState({faltaDescrip:'Se necesita como minimo una Restriccion'});\r\n            }\r\n           \r\n            return false\r\n        }\r\n    }\r\n    //Funcion que se encarga de manejar las modificaciones en las variables.\r\n    handlerInputVar = event => {\r\n        let {value, name} = event.target;\r\n        let {variables} = this.props.status;\r\n        //Asignamos Valor y reasignamos el indice\r\n        variables[name].xi = name; \r\n        variables[name].descripcion = value;\r\n        if (name>1 && value ==='') {\r\n            //Si la desc esta vacia eliminamos la variable\r\n            variables.splice(name,1)\r\n        }\r\n        //Pasasamos al Padre los cambios realizados en la variable\r\n        this.props.handleVariables(variables);\r\n        //llamamos a la funcion que se encarga de generar nuevas variables.\r\n        this.handleNewsVar(this.props.status.method)      \r\n    }\r\n    //Funcion que se encarga de manejar las modificaciones de restricciones.\r\n    handlerInputRes = event => {\r\n        let {value, name} = event.target;\r\n        let {restricciones} = this.props.status;\r\n        //Asignamos el nuevo cambio \r\n        restricciones[name].ri = name \r\n        restricciones[name].descripcion = value;\r\n        if (value === '') {\r\n            //si el cambio es dejarla vacia entonces eliminamos la restriccion\r\n            restricciones.splice(name,1);     \r\n        }\r\n        //pedimos al padre que almacene los cambios\r\n        this.props.handleRestricciones(restricciones);\r\n        //Llamamos a generar si corresponde nueva restriccion\r\n        this.handleNewsRes()\r\n    }\r\n    //Funcion que se encarga de Añadir una restriccion si es necesario.\r\n    handleNewsRes = () => {\r\n        let {restricciones} = this.props.status;\r\n        //Contador de Rescciones sin descripciones.\r\n        let counterWitheRes = restricciones.filter( element => element.descripcion.length === 0).length;\r\n        //Si el contador de restricciones vacias es igual a 0 entonces agregamos una restriccion mas.\r\n        if (counterWitheRes === 0 ) {\r\n            restricciones.push({ri:restricciones.length,descripcion:'',coeficientes:[],eq:'>=',derecha:''})\r\n            this.props.handleRestricciones(restricciones);\r\n        }\r\n    }\r\n    //Funcion que se encarga de Añadir una Variable si es necesario.\r\n    handleNewsVar = method => {\r\n        let {variables} = this.props.status;\r\n        if (method === 'simplex') {\r\n            //Si el metodo es Simplex, se permite agregar mas de dos variables.\r\n            let counterWitheVar = variables.filter( element => element.descripcion.length === 0).length;\r\n            //Si la cantidad de Variables Libres es igual a 0 se agrega una mas.\r\n            if (counterWitheVar === 0 ) {  \r\n                variables.push({xi:variables.length,descripcion:'',coeficiente:''})\r\n                this.props.handleVariables(variables);    \r\n            }\r\n        }else{\r\n            //Si no lo es, aseguramos que existan solo dos, entonces eliminamos lo que este de mas.\r\n            if(variables.length > 2) {     \r\n                variables.splice(2)\r\n                this.props.handleVariables(variables);\r\n            }\r\n        }\r\n        \r\n\r\n    }\r\n    \r\n    render () {\r\n        //Obtenemos de las props, las varaibles y restricciones.\r\n        let {variables} = this.props.status;\r\n        let {restricciones} = this.props.status;\r\n        // Generamos los inputs para las Variables\r\n        let variablesARenderizar = variables\r\n        .map( (variable,index) => \r\n                <InputGroup className=\"mt-1\"  id={'XTT'+index} key={'VTD'+index}>\r\n                    <InputGroupAddon addonType=\"prepend\">\r\n                        <InputGroupText name=\"xi\" id=\"variable\">{\"X\"+index}</InputGroupText>\r\n                    </InputGroupAddon>\r\n                    <Input  \r\n                        name={index}\r\n                        placeholder=\"Descripcion de la Variable\"\r\n                        aria-label=\"Descripcion\"\r\n                        aria-describedby=\"variable\"\r\n                        onChange={this.handlerInputVar}\r\n                        value={variable.descripcion}/>\r\n                    <UncontrolledPopover flip={false}trigger='focus hover' placement=\"auto\" target={'XTT'+index}>\r\n                        <PopoverBody>Aqui, debes ingresar que representa la Variable en el Modelo.</PopoverBody>\r\n                    </UncontrolledPopover>\r\n                </InputGroup>);\r\n        //Generamos los imputs para las restricciones\r\n        let restriccionesARenderizar = restricciones\r\n        .map( (restriccion,index) => \r\n                <InputGroup className=\"mt-1\" id={\"TTR\"+index} key={'RTD'+index}>\r\n                    <InputGroupAddon addonType=\"prepend\">\r\n                        <InputGroupText name=\"ri\" id=\"restriccion\">{\"R\"+index}</InputGroupText>\r\n                    </InputGroupAddon>\r\n                        <Input\r\n                            name={index}\r\n                            placeholder=\"Descripcion de la Restriccion\"\r\n                            aria-label=\"Descripcion\"\r\n                            aria-describedby=\"restriccion\"\r\n                            onChange={this.handlerInputRes}\r\n                            value={restriccion.descripcion}/>\r\n                    <UncontrolledPopover flip={false}trigger='focus hover' placement=\"auto\" target={'TTR'+index}>\r\n                       <PopoverBody>Aqui, debes ingresar que representa la Restriccion en el Modelo.</PopoverBody>\r\n                    </UncontrolledPopover>      \r\n                </InputGroup>);\r\n        let buttonsMethods = (<ButtonGroup id='ButtUtil'> \r\n                                <Button outline onClick={() => {this.props.handleMethod('graph');this.handleNewsVar('graph')}} \r\n                                        active={this.props.status.method === 'graph'}\r\n                                        color='primary'>\r\n                                    GRAFICO\r\n                                </Button>\r\n                                <Button outline onClick={() => {this.props.handleMethod('simplex');this.handleNewsVar('simplex')}} \r\n                                        active={this.props.status.method === 'simplex'}\r\n                                        color='primary'>\r\n                                    SIMPLEX\r\n                                </Button>\r\n                            </ButtonGroup>)\r\n        let buttonsOptType = (<ButtonGroup>\r\n                                <Button outline \r\n                                        onClick={() => this.props.handleObjective('max')} \r\n                                        active={this.props.status.objective === 'max'}\r\n                                        color='primary'>\r\n                                    Maximizar\r\n                                </Button>\r\n                                <Button outline \r\n                                        onClick={() => this.props.handleObjective('min')} \r\n                                        active={this.props.status.objective === 'min'}\r\n                                        color='primary'>\r\n                                    Minimizar\r\n                                </Button>\r\n                            </ButtonGroup>)\r\n       \r\n       return(\r\n            <>\r\n                <h3>Comenzamos configurando nuestro Modelo:</h3>\r\n                <Container>\r\n                    <Row>\r\n                        <Col>\r\n                            <UncontrolledPopover flip={false} trigger='hover' placement=\"top\" target='CardInteger'>\r\n                                    <PopoverBody>Esta funcion Activa o Desactiva la Programacion Lineal Entera.</PopoverBody>\r\n                            </UncontrolledPopover>  \r\n                            <Card outline color='secondary' id='CardInteger' className=\"mt-2 mx-auto\">\r\n                                <CardHeader>Programacion Entera:</CardHeader>\r\n                                <CardBody><Button outline color={this.props.status.integer ? 'success':'danger'}\r\n                                            onClick={() => this.props.toggleInteger()}>\r\n                                    {this.props.status.integer ? 'Activo':'Inactivo'}</Button>\r\n                                </CardBody>            \r\n                            </Card>\r\n                        </Col>\r\n                        <Col>\r\n                            <UncontrolledPopover flip={false} trigger='hover' placement=\"top\" target='CardModel'>\r\n                                    <PopoverBody>Esta funcion cargara un modelo pre definido con el objeto de probar el funcionamiento de la aplicacion.</PopoverBody>\r\n                            </UncontrolledPopover>  \r\n                            <Card outline color='secondary' id='CardModel' className=\"mt-2 mx-auto\">\r\n                                <CardHeader>Modelo de Ejemplo:</CardHeader>\r\n                                <CardBody><Button color='warning' \r\n                                            outline \r\n                                            onClick={this.props.loadExampleModel}>Cargar</Button>\r\n                                </CardBody>            \r\n                            </Card>\r\n                        </Col>  \r\n                         \r\n                        \r\n                    </Row>\r\n                    <Row>\r\n                        <Col>\r\n                            <UncontrolledPopover flip={false} trigger='hover' placement=\"top\" target='CardUtil'>\r\n                                    <PopoverBody>Aqui, debes seleccionar el metodo de Calculo y Visualizacion de los Resultados.</PopoverBody>\r\n                            </UncontrolledPopover>       \r\n                            <Card outline color='secondary' id='CardUtil' className=\"mt-3 mx-auto\">\r\n                                \r\n                                <CardHeader>Metodo a Utilizar:</CardHeader>\r\n                                <CardBody>{buttonsMethods}</CardBody>            \r\n                            </Card>  \r\n                        </Col>     \r\n                       \r\n                        <Col>\r\n                            <UncontrolledPopover flip={false} trigger='hover' placement=\"top\" target='CardOpt'>\r\n                                    <PopoverBody>Y aqui, el tipo de Optimizacion que deseas realizar, si deseas Maximizar tu funcion o Minimizarla.</PopoverBody>\r\n                            </UncontrolledPopover> \r\n                            <Card outline color='secondary' id='CardOpt' className=\"mt-3 mx-auto\">\r\n                                \r\n                                <CardHeader>Tipo de Optimizacion:</CardHeader>\r\n                                <CardBody>{buttonsOptType}</CardBody>  \r\n                            </Card>\r\n                        </Col>\r\n                        \r\n                    </Row>\r\n                    <Row>\r\n                        <UncontrolledPopover flip={false} trigger='hover' placement=\"top\" target='CardVariables'>\r\n                            <PopoverHeader>Variables</PopoverHeader>\r\n                            <PopoverBody>Aqui, debes ingresar las Variables que representaran al modelo, las mismas son de carga dinamica.</PopoverBody>\r\n                        </UncontrolledPopover>  \r\n                        <Card outline color='secondary' id='CardVariables' className=\"w-100 mt-3 mx-auto\">\r\n                            <CardHeader><CardTitle className=\"text-left\" ><h4>Variables:</h4></CardTitle></CardHeader>       \r\n                            <CardBody>\r\n                                {variablesARenderizar}\r\n                            </CardBody>\r\n                        </Card>\r\n                    </Row>\r\n                    <Row>\r\n                        <UncontrolledPopover flip={false} trigger='hover' placement=\"top\" target='CardRestri'>\r\n                            <PopoverHeader>Restricciones</PopoverHeader>\r\n                            <PopoverBody>Aqui, debes ingresar las Restricciones que representaran al modelo, como las Variables estas tambien son de carga dinamica.</PopoverBody>\r\n                        </UncontrolledPopover>  \r\n                        <Card outline color='secondary' id='CardRestri' className=\"w-100 mt-3 mx-auto\">\r\n                            <CardHeader><CardTitle className=\"text-left\" ><h4>Restricciones:</h4></CardTitle></CardHeader>       \r\n                            <CardBody>\r\n                                {restriccionesARenderizar}\r\n                            </CardBody>\r\n                        </Card>\r\n                    </Row>\r\n                    {this.state.faltaDescrip !== '' && \r\n                        <Row className=\"mt-3\">\r\n                            <Alert className=\"mx-auto\" color=\"danger\">{this.state.faltaDescrip}</Alert>\r\n                        </Row>}\r\n                </Container>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Configuration;","import React from 'react';\r\nimport {Button,InputGroupText,Card,CardBody,CardHeader,CardTitle ,InputGroup, Input,InputGroupAddon, ButtonGroup,UncontrolledTooltip} from 'reactstrap';\r\n\r\nconst Restriccion = props => {\r\n    let {coeficientes} = props.restriccion;\r\n    //Verificamos la cantidad de coeficientes dependiendo de la cantidad de variables.\r\n    if (coeficientes.length !== props.cantVariables) {\r\n        //Diferencia de entre las variables y los coeficientes de las restricciones. \r\n        let diferencia = props.cantVariables - coeficientes.length;\r\n        if ( diferencia > 0 ) {\r\n            for (let index = 0; index < diferencia; index++) {\r\n                coeficientes.push('')       \r\n            }\r\n        }else {\r\n            coeficientes.splice(props.cantVariables)\r\n        }\r\n    }\r\n\r\n    let thisEq = props.restriccion.eq;\r\n    let botoneraMaxMin = (<ButtonGroup className='mx-1' key={'Eq'+props.restriccion.ri}>\r\n                                    <Button key={'B<s'+props.restriccion.ri} name='eq' \r\n                                        onClick={e => {props.handleCoefRes(e,props.restriccion.ri);thisEq='<='}} \r\n                                        color={thisEq === '<=' ? \"primary\":\"secondary\" } \r\n                                        value='<='>{'<='}</Button>\r\n                                    <Button key={'B='+props.restriccion.ri} name='eq' \r\n                                        disabled \r\n                                        onClick={e => {props.handleCoefRes(e,props.restriccion.ri);thisEq='='}} \r\n                                        color={thisEq === '=' ? \"primary\":\"secondary\"} \r\n                                        value='='>{'='}</Button>\r\n                                    <Button key={'B>'+props.restriccion.ri} name='eq' \r\n                                        onClick={e => {props.handleCoefRes(e,props.restriccion.ri);thisEq='>='}} \r\n                                        color={thisEq === '>=' ? \"primary\":\"secondary\"} \r\n                                        value='>='>{'>='}</Button>\r\n                                </ButtonGroup>);\r\n    let inputsRestriccions = coeficientes\r\n    .map((coeficiente,indx) => \r\n        <React.Fragment key={'divCi'+indx}>\r\n            <Input key={'Ci'+props.restriccion.ri+'r'+indx}\r\n                type=\"number\"\r\n                name={indx}\r\n                placeholder=\"Coefiente\"\r\n                className=\"InputCoeficiente\"\r\n                onChange={e => {props.handleCoefRes(e,props.restriccion.ri)}}\r\n                value={coeficiente}\r\n                />\r\n            <InputGroupAddon key={'IADD'+props.restriccion.ri+'r'+indx} addonType='append'>\r\n                <InputGroupText key={'r'+props.restriccion.ri+'r'+indx}>{'X'+indx}</InputGroupText>\r\n            </InputGroupAddon>\r\n            {indx < coeficientes.length-1 && <InputGroupText key={'+'+props.restriccion.ri+'r'+indx}>+</InputGroupText>}\r\n        </React.Fragment>\r\n            \r\n    )\r\n\r\n    return(\r\n        <Card key={'CR'+props.restriccion.ri} id={'CR'+props.restriccion.ri}>\r\n            <UncontrolledTooltip key={'TTCR'+props.restriccion.ri} placement='auto' target={'CR'+props.restriccion.ri}>\r\n            {'Aqui debes ingresar los coeficiente de '+props.restriccion.descripcion}\r\n            </UncontrolledTooltip>\r\n            <CardHeader className=\"p-0 m-0\"><CardTitle>{'R'+props.restriccion.ri+':'+props.restriccion.descripcion}</CardTitle></CardHeader>\r\n            <CardBody className=\"p-0 my-1 mx-auto\">\r\n                <InputGroup key={'RT'+props.restriccion.ri}>\r\n                    {inputsRestriccions}\r\n                    {botoneraMaxMin}\r\n                    <Input key={'C'+props.restriccion.ri+'r'+coeficientes.length}\r\n                            type=\"number\"\r\n                            name={'derecha'}\r\n                            placeholder=\"Coe\"\r\n                            className=\"InputCoeficiente\"\r\n                            aria-label=\"Coe\"\r\n                            aria-describedby=\"restriccion\"\r\n                            onChange={e => {props.handleCoefRes(e,props.restriccion.ri)}}\r\n                            value={props.restriccion.derecha}/>\r\n                </InputGroup>\r\n            </CardBody>\r\n        </Card>)\r\n    \r\n}\r\n\r\nexport default Restriccion;","import React from 'react';\r\nimport {InputGroup, InputGroupAddon, InputGroupText, Input, UncontrolledTooltip } from 'reactstrap'\r\n\r\n\r\nconst FuncionObj = props => {\r\n    let {variables} = props\r\n    let variablesToFunction = variables\r\n    .filter(vari => vari.descripcion !== '')\r\n    .map( (vari,index) => \r\n        <React.Fragment key={'divIF'+index}>\r\n            <UncontrolledTooltip key={'TTV'+index} placement='auto' target={'IF'+index}>\r\n            {'Aqui debes ingresar el coeficiente de '+vari.descripcion}\r\n            </UncontrolledTooltip>\r\n            <Input key={'IF'+index}\r\n                    id={'IF'+index}\r\n                        type='number'\r\n                        name={vari.xi}\r\n                        placeholder=\"Coef\"\r\n                        className=\"InputCoeficiente\"\r\n                        aria-label=\"Coeficiente\"\r\n                        aria-describedby=\"coe\"\r\n                        onChange={ e => props.handleCoefVar(e)}\r\n                        value={vari.coeficiente}\r\n                        />\r\n            <InputGroupAddon key={'ADDIF'+index} addonType=\"append\">\r\n                <InputGroupText key={'IFD'+index}>{\"X\"+vari.xi}</InputGroupText>\r\n            </InputGroupAddon>\r\n            {index < variables.filter(vari => vari.descripcion !== '').length-1 && <InputGroupText key={'+IF'+index}>+</InputGroupText>}\r\n        </React.Fragment>) \r\n\r\n    return(\r\n            <InputGroup key={'INPUTFUNCIONAL'}>\r\n                {variablesToFunction}\r\n                <InputGroupText className='mx-1' key='IFOPT'>{' => '+props.objective.toUpperCase()}</InputGroupText>\r\n            </InputGroup>\r\n    \r\n    ) \r\n}\r\n\r\nexport default FuncionObj;","import React from 'react';\r\nimport {Row, Card,CardBody,CardHeader,CardTitle,Button,Col,Collapse,ListGroup,ListGroupItem,Badge} from 'reactstrap';\r\n\r\nclass ReferencesList extends React.Component{\r\n    constructor (props){\r\n        super(props);\r\n        this.state={references:false};\r\n\r\n    }\r\n\r\n    listDescriptionsVarItems = array => array.filter(item => item.descripcion !== '')\r\n        .map(item => <ListGroupItem key={'DLGIV'+item.xi} className=\"justify-content-between\"><Badge>{'X'+item.xi}</Badge>{' '+item.descripcion}</ListGroupItem>)\r\n    \r\n    listDescriptionsResItems = array => array.filter(item => item.descripcion !== '')\r\n        .map(item => <ListGroupItem key={'DLGIR'+item.ri} className=\"justify-content-between\"><Badge>{'R'+item.ri}</Badge>{' '+item.descripcion}</ListGroupItem>)\r\n    \r\n    render() {\r\n        //Obtenemos las propiedades del Super\r\n        let {variables} = this.props;        \r\n        let {restricciones} = this.props;\r\n\r\n        return(\r\n                    <Card outline color='secondary' className=\"w-100 mt-3\">\r\n                            <CardHeader>\r\n                                <Row>\r\n                                    <Col className=\"text-left\"><CardTitle><h4>Referencias:</h4></CardTitle></Col>\r\n                                    <Col><Button outline size='sm'\r\n                                        onClick={() => this.setState({references:!this.state.references})} \r\n                                        color={!this.state.references ? 'success':'danger'}>{!this.state.references ? 'Ver Referencias':'Ocultar Referencias'}</Button>\r\n                                    </Col>\r\n                                </Row>\r\n                            </CardHeader>\r\n                            <Collapse isOpen={this.state.references}>\r\n                                <CardBody>\r\n                                    <h5 className='text-left'>Variables:</h5>\r\n                                    <ListGroup>\r\n                                        {this.listDescriptionsVarItems(variables)}\r\n                                    </ListGroup>\r\n                                    <h5 className='text-left'>Restricciones:</h5>\r\n                                    <ListGroup>\r\n                                        {this.listDescriptionsResItems(restricciones)}\r\n                                    </ListGroup>\r\n                                                                    \r\n                                </CardBody>\r\n                            </Collapse>                       \r\n                    </Card>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ReferencesList;","import React from 'react';\r\nimport {Container, Row, Card,CardBody,CardHeader,CardTitle,Alert} from 'reactstrap';\r\nimport Restriccion from './elements/Restriccion';\r\nimport FuncionObj from './elements/FuncionObj';\r\nimport ReferencesList from './elements/ReferencesList'\r\n\r\n\r\n\r\nclass Processing extends React.Component{\r\n    constructor (props){\r\n        super(props);\r\n        this.state={faltaCoe:''};\r\n\r\n    }\r\n\r\n    isValidated() {\r\n        //Verificando si los coeficientes de las variables no son nulos\r\n        let verifQty = this.props.status.variables\r\n        .filter(va => va.descripcion !== '')\r\n        .every( va => va.coeficiente !== '')\r\n        if (verifQty) {\r\n            this.props.lastStep(2);\r\n            this.setState({faltaCoe:''})\r\n            return true\r\n        }else{\r\n            this.setState({faltaCoe:'Rellename pue todos los Coeficientes no seas Guampa'})\r\n            return false\r\n        }\r\n\r\n    }\r\n\r\n    //En el Siguiente Handler, Se toma del input de una variable en particular el coeficiente.\r\n    handleCoefVar = event => {        \r\n        let {value, name} = event.target;\r\n        if (value) {\r\n            let {variables} = this.props.status;\r\n            variables[name].coeficiente = parseInt(value);\r\n            this.props.handleVariables(variables);\r\n            console.log(this.props.status.variables);\r\n        }\r\n    }\r\n\r\n    handleCoefRes = (event,ri) => {\r\n        let {name,value } = event.target\r\n        let {restricciones} = this.props.status;\r\n        console.log('En la Res:'+ri+', en el campo:'+name+',con el valor:'+value);\r\n        \r\n        switch (name) {\r\n            case 'derecha':\r\n                    restricciones[ri].derecha = parseInt(value)\r\n                break;\r\n            case 'eq':\r\n                    restricciones[ri].eq = value\r\n                break;\r\n            default:\r\n                    restricciones[ri].coeficientes[name]= parseInt(value)\r\n                break;\r\n        }\r\n        console.log(restricciones);\r\n        this.props.handleRestricciones(restricciones);\r\n    }\r\n\r\n    render() {\r\n        //Obtenemos las propiedades del Super\r\n        let {variables} = this.props.status;        \r\n        let {restricciones} = this.props.status;\r\n        let varsOperativas = variables.filter(va => va.descripcion !== '').length;\r\n\r\n        //Generamos el renderizado para cada una de los elementos de los arreglos obtenidos anteriormente.\r\n\r\n        let restriccionesInput = restricciones\r\n        .filter(item => item.descripcion !== '')\r\n        .map( (restriccion,index) =>\r\n                <Restriccion className=\"mt-1\" \r\n                key={'R'+index} \r\n                handleCoefRes={this.handleCoefRes} \r\n                cantVariables={varsOperativas} \r\n                restriccion={restriccion}/>);\r\n        \r\n        return(\r\n            <>\r\n            <h3>Cargamos los datos de nuestro Modelo:</h3>\r\n            <Container>\r\n                <Row>\r\n                    <ReferencesList variables={variables} restricciones={restricciones}/>\r\n                </Row>\r\n                <Row>\r\n                    <Card outline color='secondary' className=\"w-100 mt-3\">\r\n                        <CardHeader><CardTitle className=\"text-left\"><h4>Funcion Objetivo:</h4></CardTitle></CardHeader>       \r\n                        <CardBody className=\"mx-auto\">\r\n                            <FuncionObj variables={variables} handleCoefVar={this.handleCoefVar} objective={this.props.status.objective}/>\r\n                        </CardBody>\r\n                    </Card>\r\n                </Row>\r\n                <Row>\r\n                    <Card outline color='secondary' className=\"w-100 mt-3\">\r\n                        <CardHeader><CardTitle className=\"text-left\"><h4>Restricciones:</h4></CardTitle></CardHeader>       \r\n                        <CardBody>\r\n                            {restriccionesInput}\r\n                        </CardBody>\r\n                    </Card>\r\n                </Row>\r\n                {this.state.faltaCoe !== '' && \r\n                        <Row className=\"mt-3\">\r\n                            <Alert className=\"mx-auto\" color=\"danger\">{this.state.faltaCoe}</Alert>\r\n                        </Row>}\r\n            </Container>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Processing;","import React from 'react';\r\nimport {Card,CardTitle,CardBody,CardText,CardHeader,Table,CardFooter,Row,Col,Button,Collapse} from 'reactstrap';\r\nimport ReferencesList from './ReferencesList'\r\n\r\nclass SimplexPresentation extends React.Component{\r\n    constructor (props){\r\n        super(props)\r\n        this.state={details:false}\r\n    }\r\n\r\n    //Funcion que en base al uso de una variable, devuelve una tabla con los recursos utilizados\r\n    tablaDeRecursosFoot = (cantUsoVar,variableId) => {\r\n        let {restricciones} = this.props;\r\n        let tableBody = restricciones.filter(item => item.descripcion!== '')\r\n        //Realizamos calculos\r\n        .map( restri => \r\n            <tr key={'TdeV'+variableId+'R'+restri.ri}><td>{'R'+restri.ri}</td><td>{cantUsoVar*restri.coeficientes[variableId]}</td>\r\n            <td>{restri.derecha-(cantUsoVar*restri.coeficientes[variableId])}</td></tr>)\r\n        return(<Table size='sm' responsive>\r\n            <thead><tr><th>Recurso</th><th>Usado</th><th>Diferencia</th></tr></thead>\r\n            <tbody>{tableBody}</tbody>\r\n        </Table>)\r\n\r\n    }\r\n\r\n    mapperAnalisisTable = (result) => {\r\n        //El array al cucal enviamos los resultados procesados\r\n        let tableResult=[];\r\n        //Obtenemos el Set de Resultados con Formato [key,value]\r\n        let resultSetArray =  Object.entries(result.solutionSet);\r\n        //Obtenemos la matriz del simplex reducida\r\n        let matrix = result._tableau.matrix;\r\n        //Obtenemos los indices de cada columna\r\n        let indexByCol = result._tableau.varIndexByCol;\r\n        //Obtenemos la Lista de Variables Slack y Reales\r\n        let variablesList = result._tableau.variablesPerIndex\r\n        //Obtenemos la Lista de Variables Reales\r\n        let variablesRealesList = result._tableau.variablesPerIndex.filter(el => !el.isSlack);\r\n        //Contamos la Cantidad de elementos en la fila de resultados (van a ser cero por ser simplex reducido)\r\n        let itemsinCero = matrix[0].length - 1;\r\n        //Obtenemos cuales son las variables que no estan en el set de resultados (van a ser cero)\r\n        let varsEnCero = variablesRealesList.filter( vari => !Object.keys(result.solutionSet).includes(vari.id) )\r\n        //La cantidad de columnas en la fila de resultados - la cantidad de variables nulas, me devuelven la cantidad de slacks\r\n        let slacksEnCero = itemsinCero - varsEnCero.length;\r\n\r\n        //Procesamos INFO\r\n\r\n        //Primer elemento de la Tabla, el Optimo.\r\n        tableResult.push({name:'Optimo',item:'',value:result.evaluation});\r\n        //Procesamos todos los elementos a producir (result Set)\r\n        resultSetArray.forEach( ([key,value]) => tableResult.push({name:'Producir',item:'X'+key, value}) )\r\n        //Procesamos el uso de los recursos, es decir, los elementos extras de la Fila de Resultados(Matriz)\r\n        if (resultSetArray.length < matrix.length-1) {\r\n            console.log('hola');\r\n        }\r\n\r\n        //Procesamos los Costo de Oportunidad y los Valores Marginales\r\n        matrix[0].slice(1)\r\n                .forEach( (col,indCol) => {\r\n                    //Creamos un nuevo item.\r\n                    let item= {name:'',item:'',value:''};\r\n                    //Verificamos si es Slack o Variable Real\r\n                    if ( indCol < slacksEnCero ) {        \r\n                        item.name = 'Valor Marginal';\r\n                        item.item = 'R'+indexByCol[indCol+1];\r\n                        item.value = Math.abs(col);\r\n                    }else {\r\n                        item.name = 'Costo de Oportunidad';\r\n                        item.item = 'X'+variablesList[indexByCol[indCol+1]].id;\r\n                        item.value = Math.abs(col);\r\n                    }\r\n                    //Empujamos el item a la tabla de resultados\r\n                    tableResult.push(item)})\r\n            \r\n        return tableResult\r\n    }\r\n\r\n    cardsVariablesRender = (variables,result) => variables\r\n                                                    .filter(vari => vari.descripcion !== '')\r\n                                                    .map( vari => \r\n                                                                <Card key={'C-V-'+vari.xi} outline color='secondary' className=\"w-100 mt-3 mx-auto\">\r\n                                                                    <CardHeader><CardTitle>{'Variable: X'+vari.xi}</CardTitle></CardHeader>    \r\n                                                                    <CardBody>\r\n                                                                        <Row><CardText>{\r\n                                                                            result.solutionSet[vari.xi] ? \r\n                                                                            'Se recomienda producir '+result.solutionSet[vari.xi]+' unidades':\r\n                                                                            'No se recomienda la produccion'}\r\n                                                                            {' de '+vari.descripcion}</CardText>\r\n                                                                        </Row>\r\n                                                                        <Row></Row> \r\n                                                            \r\n                                                                    </CardBody>\r\n                                                                    <CardFooter>\r\n                                                                        <CardText>Tabla de Recursos:</CardText>\r\n                                                                        {result.solutionSet[vari.xi] ? \r\n                                                                        this.tablaDeRecursosFoot(result.solutionSet[vari.xi],vari.xi):'Sin Consumo de Recursos'}\r\n                                                                    </CardFooter>\r\n\r\n                                                                </Card>)\r\n\r\n\r\n    render () {\r\n        //Obtenemos el resultado almacenado\r\n        //Obtenemos las Variables desde las props\r\n        let {variables, restricciones,result} = this.props;\r\n        \r\n    \r\n        //Obtenemos  la informacion para la tabla de Analisis\r\n        let itemsTabAnalisis = this.mapperAnalisisTable(result);     \r\n        //Renderizamos el Tablero de analisis\r\n        let elementosTabAnalisis = itemsTabAnalisis.map( (item, index) => <tr key={'T-A-'+index}><td>{item.name}</td><td>{item.item}</td><td>{item.value}</td></tr>);\r\n        // \r\n        let resultAnalisisCard = \r\n                        <Card outline color='secondary' className=\"w-100 mt-3 mx-auto\">\r\n                            <CardHeader><CardTitle><h4>Tablero de Analisis</h4></CardTitle></CardHeader>\r\n                            <CardBody>\r\n                                <Table>\r\n                                    <thead><tr><th></th><th>Elemento</th><th>Valor</th></tr></thead>\r\n                                    <tbody>\r\n                                        {elementosTabAnalisis}\r\n                                    </tbody>\r\n                                </Table>\r\n                            </CardBody>\r\n                        </Card>\r\n\r\n        let resultDetalleCard = <Card outline color='secondary' className=\"w-100 mt-3 mx-auto\">\r\n                                <CardHeader>\r\n                                    <Row>\r\n                                        <Col className=\"text-left\"><CardTitle><h5>Detalle de Variables Y Recursos:</h5></CardTitle></Col>\r\n                                        <Col><Button outline size='sm'\r\n                                            onClick={() => this.setState({details:!this.state.details})} \r\n                                            color={!this.state.details ? 'success':'danger'}>{!this.state.details ? 'Ver Detalles':'Ocultar Detalles'}</Button>\r\n                                        </Col>\r\n                                    </Row>\r\n                                </CardHeader>\r\n                                <Collapse isOpen={this.state.details}>\r\n                                    <CardBody>\r\n                                        {this.cardsVariablesRender(variables,result)}\r\n                                    </CardBody>\r\n                                </Collapse>\r\n                            </Card>\r\n        return(\r\n                <CardBody>\r\n                    <Row>{resultAnalisisCard}</Row>\r\n                    <Row><ReferencesList variables={variables} restricciones={restricciones}/></Row>\r\n                    <Row>{resultDetalleCard}</Row>\r\n                </CardBody>)\r\n    }\r\n}\r\n\r\nexport default SimplexPresentation;","import React from 'react';\r\nimport {CardBody, Card, CardHeader,CardFooter,Table,Row} from 'reactstrap';\r\nimport {XYPlot, XAxis, YAxis, HorizontalGridLines,LineSeries, AreaSeries, VerticalGridLines,MarkSeries,DiscreteColorLegend,Hint} from 'react-vis';\r\nimport {Expression, Equation} from 'algebra.js';\r\nvar randomColor = require('randomcolor');\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass GraphicPresentation extends React.Component{\r\n    constructor (props){\r\n        super(props)\r\n        this.state={optimMark:[],points:[],lines:[],referencias:[],value:null}\r\n    }\r\n\r\n    componentDidMount() {\r\n        if ( this.props.graph ){\r\n            let {variables,restricciones,result} = this.props\r\n            restricciones = restricciones.filter(elem => elem.descripcion!=='');\r\n            variables = variables.filter(elem => elem.descripcion!=='');\r\n            let referencias = this.getColorList(restricciones);\r\n            let {lines,expresiones} = this.getLinesAndExpressions(restricciones);\r\n            let optimMark = this.getOptimPoint(result.solutionSet);\r\n            let points = this.getPoints(variables,restricciones,expresiones)\r\n            this.setState({referencias,lines,points,optimMark});\r\n            \r\n        }\r\n    }\r\n    componentDidUpdate(prevProps){\r\n        if ( prevProps !== this.props ){\r\n            if ( this.props.graph ){\r\n                let {variables,restricciones,result} = this.props\r\n                restricciones = restricciones.filter(elem => elem.descripcion!=='');\r\n                variables = variables.filter(elem => elem.descripcion!=='');\r\n                let referencias = this.getColorList(restricciones);\r\n                let {lines,expresiones} = this.getLinesAndExpressions(restricciones);\r\n                let optimMark = this.getOptimPoint(result.solutionSet);\r\n                let points = this.getPoints(variables,restricciones,expresiones)\r\n                this.setState({referencias,lines,points,optimMark});\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    getLinesAndExpressions = restricciones => {\r\n        let expresiones = [];\r\n        let lines = restricciones.map( restri => {\r\n            if (restri.coeficientes[0] !== 0  && restri.coeficientes[1] !== 0) {\r\n                console.log(restri.coeficientes);\r\n                let x = new Expression('x').multiply(restri.coeficientes[0]);\r\n                let y = new Expression('y').multiply(restri.coeficientes[1]);\r\n                let expressRestri = new Expression().add(x).add(y);  \r\n                let restriEquation = new Equation(expressRestri,restri.derecha)\r\n                expresiones.push({restriEquation,tipo:2})\r\n                let yEqu = (new Equation(restriEquation.solveFor('x'),0)).solveFor('y');\r\n                let xEqu = (new Equation(restriEquation.solveFor('y'),0)).solveFor('x');\r\n                if (xEqu > -1 && yEqu > -1) {return([{x:0,y:yEqu},{x:xEqu,y:0}])}\r\n            }else {\r\n                if (restri.coeficientes[0] !== 0) {\r\n                    console.log(restri.coeficientes);\r\n                    \r\n                    let x = new Expression('x').multiply(restri.coeficientes[0]);\r\n                    let restriEquation = new Equation(x,restri.derecha)\r\n                    expresiones.push({restriEquation,tipo:0})\r\n                    let xEqu = restriEquation.solveFor('x');\r\n                    if (xEqu > -1 ){return([{x:xEqu,y:0},{x:xEqu,y:10}])}\r\n                }else {\r\n                    console.log(restri.coeficientes);\r\n                    let y = new Expression('y').multiply(restri.coeficientes[1]);\r\n                    let restriEquation = new Equation(y,restri.derecha)\r\n                    expresiones.push({restriEquation,tipo:1})\r\n                    let yEqu = restriEquation.solveFor('y')\r\n                    if ( yEqu > -1) {return([{x:0,y:yEqu},{x:10,y:yEqu}])}               \r\n                } \r\n            }\r\n        })\r\n        return { lines,expresiones }\r\n    }\r\n\r\n    \r\n    getColorList = restricciones => restricciones.map( restri => Object({title: 'R'+restri.ri+' Tipo:'+restri.eq, color: randomColor()}))\r\n\r\n    getOptimPoint = (solSet) => {\r\n         //Analizamos el Punto Optimo.\r\n         if ( solSet['0'] && solSet['1'] ) {return[{x:Number(solSet['0']),y:Number(solSet['1']),P:'0 - OPTIMO'}]\r\n        }else if ( solSet['0'] ) {return[{x:Number(solSet['0']),y:0,P:'0 - OPTIMO'}]\r\n        }else { return[{x:0,y:Number(solSet['1']),P:'0 - OPTIMO'}]}\r\n    }\r\n\r\n    getPoints = (variables,restricciones,expresiones) => {    \r\n        //Limpiamos nuestro array de Puntos\r\n        let points = [];\r\n        \r\n        //Analizamos las Rectas que cortan en los Ejes.\r\n        expresiones.forEach( exp => {\r\n            \r\n            if (exp.tipo === 2) {\r\n                //Obtenemos Cortes sobre el Eje-X\r\n                let expResultX = Number((new Equation(exp.restriEquation.solveFor('y'),0)).solveFor('x'));\r\n                //Obtenemos el Corte sobre el Eje-Y\r\n                let expResultY = Number((new Equation(exp.restriEquation.solveFor('x'),0)).solveFor('y'));\r\n\r\n                if ( expResultY > -1 ) {\r\n                    //Generamos el Punto en Y\r\n                    let pointInAxY = {x:0,y:expResultY,P:points.length+1}\r\n                    //Verificamos el punto en Y con las Restricciones.\r\n                    if (this.verifyPointInRestrictions(pointInAxY,restricciones)){points.push(pointInAxY)}\r\n                }\r\n                if ( expResultX > -1 ) {\r\n                     //Generamos el Punto en X\r\n                    let pointInAxX = {x:expResultX,y:0,P:points.length+1}\r\n                    //Verificamos el punto en X con las Restricciones.\r\n                    if (this.verifyPointInRestrictions(pointInAxX,restricciones)){points.push(pointInAxX)} \r\n                }  \r\n            }\r\n            // //Punto experminental \r\n            // points.push({x:expResultX,y:expResultY,Info:'EXP'})\r\n        });\r\n\r\n        //Analizamos los cortes de las Rectas de Restricciones.\r\n        expresiones.forEach(exp1 => {\r\n            //Validamos cada unas de las Rectas con las demas.\r\n            expresiones.forEach( exp2 => {\r\n                //Verificamos que no sea la misma recta.\r\n                if( exp1 !== exp2) {\r\n                    let expResultX = 0;\r\n                    let expResultY = 0;\r\n                    //Obtenemos  las expresiones y las igualamos para obtener el punto de corte.\r\n                    if ( exp1.tipo === 2 && exp2.tipo === 2 ) {\r\n                        expResultX = Number((new Equation(exp1.restriEquation.solveFor('y'),exp2.restriEquation.solveFor('y'))).solveFor('x'));\r\n                        expResultY = Number((new Equation(exp1.restriEquation.solveFor('x'),exp2.restriEquation.solveFor('x'))).solveFor('y'));\r\n                    }\r\n                    //Verificamos que no se corten en algun otro cuadrante que no sea el de analisis.\r\n                    if ( expResultX > -1  && expResultY > -1 ) {\r\n                        //Generamos el Punto.\r\n                        let point = {x:expResultX,y:expResultY,P:points.length+1}\r\n                        //Verificamos el Punto.\r\n                        if (this.verifyPointInRestrictions(point,restricciones)){points.push(point)}     \r\n                    }            \r\n                }\r\n            } )\r\n\r\n        });\r\n        return points\r\n    }\r\n\r\n    getTableResult = () =>\r\n        <Table>\r\n            <thead><tr><th>Hola</th><th>Como</th></tr></thead>\r\n            <tbody><tr><td>Que</td><td>Onda</td></tr></tbody>\r\n        </Table>\r\n\r\n    verifyPointInPoints = () =>{}\r\n\r\n    verifyPointInRestrictions = (point,restricciones) => {\r\n        let verify = true;\r\n        restricciones.forEach( restri => {\r\n            let calIzq = restri.coeficientes[0]*point.x + restri.coeficientes[1]*point.y;\r\n         \r\n            if( restri.eq === '>=' ) {\r\n                console.log('P:'+point+' R:'+calIzq + '>='+ restri.derecha);\r\n                if (Math.round(calIzq) < restri.derecha) {verify=false}\r\n            }else {\r\n                console.log('P:('+point.x+','+point.y+') R:'+calIzq + '<='+ restri.derecha);\r\n                if (Math.round(calIzq) > restri.derecha) {verify=false}\r\n            } } )\r\n        return verify\r\n    }\r\n       \r\n    _forgetValue = () => this.setState({value: null})\r\n\r\n    \r\n    _rememberValue = value => this.setState({ value })\r\n\r\n\r\n    mapperLinesSeries = (lines,referencias) => \r\n        lines.map((data,index) => <LineSeries key={'L-S-A'+index} color={referencias.length > 0 ?referencias[index].color:'red'} data={data}/>)\r\n    \r\n\r\n    render () {\r\n        let {referencias,lines,value,points,optimMark} = this.state;\r\n        return( \r\n        <CardBody>\r\n            <Card>\r\n                <CardHeader>Grafico</CardHeader>\r\n                <CardBody>\r\n                    <Row className='mx-auto'>\r\n                        <XYPlot\r\n                            onMouseLeave={() => this.setState({pointer: null})}\r\n                            width={500}\r\n                            height={400}>\r\n                                <HorizontalGridLines/>\r\n                                <VerticalGridLines/>\r\n                                <XAxis title='Variable X0' />\r\n                                <YAxis  title='Variable X1'/>\r\n                                \r\n                                {this.mapperLinesSeries(lines,referencias)}\r\n                            \r\n                                <MarkSeries\r\n                                    onValueMouseOver={this._rememberValue}\r\n                                    onValueMouseOut={this._forgetValue}\r\n                                    color={'blue'}\r\n                                    opacity={0.7}\r\n                                    data={points}\r\n                                    />\r\n                                <MarkSeries\r\n                                    onValueMouseOver={this._rememberValue}\r\n                                    onValueMouseOut={this._forgetValue}\r\n                                    color={'green'}\r\n                                    data={optimMark}\r\n                                    />\r\n                                {value && <Hint value={value} />} \r\n                        </XYPlot>\r\n                    </Row>\r\n                    <Row className='mx-auto'><DiscreteColorLegend orientation=\"horizontal\" items={referencias}/></Row>\r\n                </CardBody>\r\n                <CardFooter>\r\n                    {this.getTableResult()}\r\n                </CardFooter>\r\n            </Card>\r\n        </CardBody> )\r\n    }\r\n}\r\n\r\nexport default GraphicPresentation;","import React from 'react';\r\nimport {Card,CardTitle,CardHeader} from 'reactstrap';\r\nimport solver from 'javascript-lp-solver';\r\nimport SimplexPresentation from './elements/SimplexPresentation'\r\nimport GraphicPresentation from './elements/GraphicPresentation';\r\n\r\nlet convertAppToModelForSolverPrimal = datosApp => {\r\n    //Obtenemos los Datos de la aplicacion\r\n    let {restricciones,variables,objective,integer} = datosApp;\r\n    variables = variables.filter(item => item.descripcion !== '');\r\n    restricciones = restricciones.filter(item => item.descripcion !== '');\r\n    //Precargamos el Modelo\r\n    let model = {optimize:'coeficiente',opType:'',constraints:{},variables:{},ints:{}};\r\n    \r\n    //Tratamos el objetivo\r\n    model.opType = objective;\r\n\r\n    //Verificamos si se desea PL Entera\r\n    if (integer) {\r\n        variables.forEach(vari => model.ints[vari.xi]=1)\r\n    }    \r\n    //Tratamos las Variables\r\n    variables.forEach( vari => {  \r\n            //Generamos una nueva Variable\r\n            let newVari = {};\r\n            newVari.coeficiente = vari.coeficiente;\r\n            restricciones.forEach(restri =>\r\n                    newVari['r'+restri.ri] = restri.coeficientes[vari.xi]);\r\n            console.log(newVari);\r\n            model.variables[vari.xi] = newVari;\r\n        });\r\n    //Tratamos las Restricciones\r\n    restricciones.forEach(restri => {\r\n            if(restri.eq === '>='){ \r\n                let res = {};\r\n                res.min = restri.derecha     \r\n                model.constraints['r'+restri.ri] = res;\r\n            }else{\r\n                let res = {};\r\n                res.max = restri.derecha\r\n                model.constraints['r'+restri.ri] = res;\r\n            }});\r\n    \r\n    return model\r\n}\r\n        \r\nclass Presentation extends React.Component{\r\n    constructor (props){\r\n        super(props)\r\n        this.state={result:false,details:false}\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.props.status.result){\r\n            this.calculateResults()\r\n        }\r\n\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (this.props !== prevProps){\r\n            if (this.props.status.result){\r\n                this.calculateResults()\r\n            }  \r\n        }\r\n    }\r\n\r\n    //Funcion de Calculo del modelo.\r\n    calculateResults = () => {\r\n        //Convertimos la App en Modelo para Solver.js\r\n        let model = convertAppToModelForSolverPrimal(this.props.status);\r\n        console.log(model);\r\n        \r\n        //solver.js soluciona y nos devuelve \r\n        let result = solver.Solve(model,false,true);\r\n        console.log(result);\r\n        \r\n        this.setState({result})\r\n    }\r\n\r\n\r\n    render () {\r\n        //Obtenemos el resultado almacenado\r\n        let {result} = this.state\r\n        let printResults;\r\n        if (result.feasible) {\r\n            //Obtenemos las Variables desde las props\r\n            let {variables, restricciones, method} = this.props.status;\r\n            if (method === 'simplex') {\r\n                printResults = <SimplexPresentation variables={variables} restricciones={restricciones} result={result}/>\r\n            }else{printResults = <GraphicPresentation variables={variables} restricciones={restricciones} graph={this.props.status.result} result={result}/>}      \r\n        }\r\n\r\n       return(\r\n            <> \r\n                <Card outline color='info' className=\"w-100 mt-3 mx-auto\">\r\n                    <CardHeader><CardTitle><h3>{result.feasible ? 'El resultado optimo de la funcion objetivo es: '+result.evaluation:'Solucion No Factible'}</h3></CardTitle></CardHeader>\r\n                    {result.feasible && printResults }\r\n                </Card>  \r\n            </>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default Presentation;","import React from 'react';\r\nimport { Container,Col,Row,Progress } from \"reactstrap\";\r\nimport ReactWizard from 'react-bootstrap-wizard';\r\nimport  Configuration  from \"./Configuration\";\r\nimport  Processing  from \"./Processing\";\r\nimport  Presentation  from \"./Presentation\";\r\nimport logo from '../logo.svg';\r\n\r\n\r\n\r\nclass LinealProg extends React.Component{\r\n    constructor (props){\r\n        super(props)\r\n        this.state={\r\n            variables:[{xi:0, descripcion:'',coeficiente:''},{xi:1,descripcion:'',coeficiente:''}],\r\n            restricciones:[{ri:0,descripcion:'',coeficientes:[],eq:'>=',derecha:''}],\r\n            method:\"graph\",\r\n            objective:\"max\",\r\n            integer:false,\r\n            result:false,\r\n            barProg:33\r\n        };\r\n    }\r\n    //Esta funcion maneja el cambio en las restricciones\r\n    handleRestricciones = restricciones => {\r\n        this.setState({restricciones,result:false}); \r\n    }\r\n    //Esta funcion maneja el cambio en las variables\r\n    handleVariables = variables => {\r\n        this.setState({variables,result:false}); \r\n    }\r\n    //Esta funcion maneja el cambio del metodo\r\n    handleMethod = method => {\r\n        this.setState({method,result:false}); \r\n    }\r\n    //Esta funcion maneja el cambio del objetivo de optimizacion\r\n    handleObjective = objective => {\r\n        this.setState({objective,result:false})\r\n    }\r\n    toggleInteger = () => this.setState({integer:!this.state.integer});\r\n    //Esta funcion guarda el resultado (inutilizada por el momento)\r\n    handleResult = result => {\r\n        this.setState({result})\r\n    }\r\n    //Esta funcion habilita el calculo en el ultimo paso\r\n    lastStep = step => {\r\n        if (step === 2) {\r\n            this.setState({result:true,barProg:100})\r\n        }else{\r\n            this.setState({result:false,barProg:66})\r\n        }\r\n        \r\n    }\r\n\r\n    finishButtonClick = result => {\r\n        console.log('En algun momento va a imprimir resultados');\r\n    }\r\n\r\n    loadExampleModel = () =>{\r\n        let variables = [{xi:0, descripcion:'Pantalones (U/dia)',coeficiente:3},{xi:1, descripcion:'Camisas (U/Dia)',coeficiente:1}]\r\n        let restricciones = [{ri:0,descripcion:'Mano de Obra (hs/Dia)',coeficientes:[2,1],eq:'<=',derecha:8},{ri:1,descripcion:'Tela (m2)',coeficientes:[3,1],eq:'<=',derecha:30}]\r\n        this.setState({variables,restricciones,integer:false,method:'graph',objective:\"max\"})\r\n    }\r\n  \r\n    render () {\r\n        var steps = [\r\n            // this step hasn't got a isValidated() function, so it will be considered to be true\r\n            { stepName: \"Configuracion del Modelo\", \r\n            component:Configuration,\r\n            stepProps:{\r\n                status:this.state,\r\n                loadExampleModel:this.loadExampleModel,\r\n                handleMethod:this.handleMethod,\r\n                handleVariables:this.handleVariables,\r\n                handleRestricciones:this.handleRestricciones,\r\n                lastStep:this.lastStep,\r\n                toggleInteger:this.toggleInteger,\r\n                handleObjective:this.handleObjective\r\n            }\r\n        },\r\n            // this step will be validated to false\r\n            { stepName: \"Detalles del Modelo\",\r\n            component:Processing, \r\n            stepProps:{\r\n                status:this.state,\r\n                handleVariables:this.handleVariables,\r\n                lastStep:this.lastStep,\r\n                handleRestricciones:this.handleRestricciones,\r\n            }\r\n        },\r\n            // this step will never be reachable because of the seconds isValidated() steps function that will always return false\r\n            { stepName: \"Presentacion de los Resultados\",\r\n            component:Presentation,\r\n            stepProps:{\r\n                status:this.state,        \r\n                handleResult:this.handleResult,\r\n                lastStep:this.lastStep\r\n            }\r\n        }\r\n          ];        \r\n        return(\r\n            <Container fluid className=\"App\">\r\n                <Row className=\"\">\r\n                    <Col xs={12} md={6}  className=\"mx-auto\">\r\n                        <img src={logo} className=\"App-logo\" alt=\"logo\" height=\"200\" />\r\n                        <Progress  animated color=\"blue\" value={this.state.barProg} />\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col xs={12} md={6} className=\"my-4 mx-auto\">\r\n                        <ReactWizard\r\n                            steps={steps}\r\n                            title=\"Programacion Lineal\"\r\n                            progressbar\r\n                            headerTextCenter\r\n                            validate\r\n                            color=\"blue\"\r\n                            previousButtonText=\"Volver\"\r\n                            nextButtonText=\"Siguiente\"\r\n                            finishButtonText='Imprimir Resultados'\r\n                            finishButtonClick={this.finishButtonClick}\r\n                            />\r\n                     \r\n                    </Col>                        \r\n                </Row>\r\n\r\n            </Container>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default LinealProg;","import React from 'react';\r\nimport { Button,Jumbotron,Container,Row,Col,ButtonGroup} from \"reactstrap\";\r\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\r\nimport  LinealProg  from \"./components/LinealProg\";\r\nimport GraphicPresentation from './components/elements/GraphicPresentation';\r\n\r\n\r\nconst LinealProgramacion = () => <LinealProg></LinealProg>;\r\n\r\nconst NoLinealProgramacion = () =>  <Container fluid className=\"App\">\r\n                                      <Row className=\"\">\r\n                                          <Col xs={12} md={6}  className=\"mx-auto my-5\">\r\n                                            <Jumbotron className=''>\r\n                                              <Row><h2>La PL No-Lineal recien estara disponible en el 2020.</h2></Row>\r\n                                              <Row><Link to={'/'}><Button className='fluid-left'>Volver</Button></Link></Row>\r\n                                            </Jumbotron>       \r\n                                          </Col>                    \r\n                                      </Row>\r\n                                    </Container>;\r\n\r\nconst Index = () => \r\n                  <Container fluid className=\"App\">\r\n                    <Row className=\"\">\r\n                        <Col xs={12} md={6}  className=\"mx-auto my-5\">\r\n                          <Jumbotron>\r\n                            <Row><h2 className='mx-auto'>Bienvenido!!!! Seleccione una opcion.</h2></Row>\r\n                            <Row className='mt-2'>\r\n                              <Col><Link to={'/linealProg'}><Button color='success'>Programacion Lineal </Button></Link></Col>\r\n                              <Col><Link to={'/noLinealProg'}><Button color='success'>Programacion No Lineal </Button></Link></Col>\r\n                            </Row>\r\n                            <Row className='mt-3'>\r\n                              <h5>Colaboradores:</h5>\r\n                            </Row>\r\n                            <Row >\r\n                              <ButtonGroup  className='mx-auto'>\r\n                                <Button  outline tag='a' href='https://github.com/EdgarCardozo'>CE</Button>\r\n                                <Button  outline tag='a' href='https://github.com/juliandiazok'>DJ</Button>\r\n                                <Button  outline tag='a' href='https://github.com/santisolis97'>SS</Button>\r\n                                <Button  outline tag='a' href='https://github.com/ianv97'>VI</Button>\r\n                                <Button  outline tag='a' href='https://github.com/santinozaracho'>ZS</Button>\r\n                              </ButtonGroup>\r\n                            </Row>\r\n                          </Jumbotron>       \r\n                        </Col>                    \r\n                    </Row>\r\n                  </Container>;\r\n\r\nconst App = () => {\r\n  return (\r\n    <Router basename={process.env.PUBLIC_URL}>\r\n        <Route exact path=\"/\" component={Index} />\r\n        <Route path=\"/linealProg\" component={LinealProgramacion} />\r\n        <Route path=\"/noLinealProg/\" component={NoLinealProgramacion} />\r\n        \r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './App.css';\r\nimport './index.css';\r\nimport 'react-vis/dist/style.css';\r\nimport App from './App';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}